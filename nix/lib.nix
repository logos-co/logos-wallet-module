# Builds the logos-wallet-module library
{ pkgs, common, src, goWalletSdk, logosSdk }:

pkgs.stdenv.mkDerivation {
  pname = "${common.pname}-lib";
  version = common.version;
  
  inherit src;
  inherit (common) buildInputs cmakeFlags meta env;
  
  # Add logosSdk to nativeBuildInputs for logos-cpp-generator
  nativeBuildInputs = common.nativeBuildInputs ++ [ logosSdk ];
  
  preConfigure = ''
    runHook prePreConfigure
    
    # Create generated_code directory for generated files
    mkdir -p ./generated_code
    
    # Build wallet library from go-wallet-sdk
    echo "Building wallet library from go-wallet-sdk"
    
    # Set up Go build environment
    export HOME=$TMPDIR
    export GOCACHE=$TMPDIR/go-cache
    export GOPATH=$TMPDIR/go
    export CGO_ENABLED=1
    mkdir -p $GOCACHE $GOPATH
    
    cd vendor/go-wallet-sdk
    echo "Go version: $(go version)"
    make build-c-lib
    cd ../..
    
    mkdir -p lib
    cp vendor/go-wallet-sdk/build/libgowalletsdk.* lib/ 2>/dev/null || true
    echo "Wallet C library copied into lib/"
    
    # Run logos-cpp-generator with metadata.json and --general-only flag
    echo "Running logos-cpp-generator..."
    logos-cpp-generator --metadata ${src}/metadata.json --general-only --output-dir ./generated_code
    
    # Check what was generated by logos-cpp-generator
    echo "Checking generated files in generated_code:"
    ls -la ./generated_code/
    
    # Create include directory and move generated files there if they exist
    if [ -f "./generated_code/core_manager_api.h" ] || [ -f "./generated_code/logos_sdk.h" ]; then
      echo "Creating include directory and moving generated files..."
      mkdir -p ./generated_code/include
      # Move generated header files to include directory
      for file in ./generated_code/*.h; do
        if [ -f "$file" ]; then
          mv "$file" ./generated_code/include/
        fi
      done
      # Also copy generated .cpp files to include directory
      for file in ./generated_code/*.cpp; do
        if [ -f "$file" ]; then
          cp "$file" ./generated_code/include/
        fi
      done
      echo "Generated include directory:"
      ls -la ./generated_code/include/
    else
      echo "Warning: No header files generated by logos-cpp-generator"
    fi
    
    runHook postPreConfigure
  '';
  
  installPhase = ''
    runHook preInstall
    
    mkdir -p $out/lib
    # Find and copy the built library file from the modules directory
    if [ -f modules/wallet_module_plugin.dylib ]; then
      cp modules/wallet_module_plugin.dylib $out/lib/
    elif [ -f modules/wallet_module_plugin.so ]; then
      cp modules/wallet_module_plugin.so $out/lib/
    else
      echo "Error: No library file found"
      exit 1
    fi
    
    # Copy the wallet library if it exists
    if [ -f lib/libgowalletsdk.dylib ]; then
      cp lib/libgowalletsdk.dylib $out/lib/
    elif [ -f lib/libgowalletsdk.so ]; then
      cp lib/libgowalletsdk.so $out/lib/
    fi
    
    # Also install the generated include files
    if [ -d "./generated_code/include" ]; then
      mkdir -p $out/include
      cp -r ./generated_code/include/* $out/include/
      echo "Installed generated include files:"
      ls -la $out/include/
    fi
    
    runHook postInstall
  '';
}
